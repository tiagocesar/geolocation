// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: handler/grpc/schema/schema.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeolocationClient is the client API for Geolocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeolocationClient interface {
	GetLocationData(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error)
}

type geolocationClient struct {
	cc grpc.ClientConnInterface
}

func NewGeolocationClient(cc grpc.ClientConnInterface) GeolocationClient {
	return &geolocationClient{cc}
}

func (c *geolocationClient) GetLocationData(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := c.cc.Invoke(ctx, "/grpc_server.Geolocation/GetLocationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeolocationServer is the server API for Geolocation service.
// All implementations must embed UnimplementedGeolocationServer
// for forward compatibility
type GeolocationServer interface {
	GetLocationData(context.Context, *LocationRequest) (*LocationResponse, error)
	mustEmbedUnimplementedGeolocationServer()
}

// UnimplementedGeolocationServer must be embedded to have forward compatible implementations.
type UnimplementedGeolocationServer struct {
}

func (UnimplementedGeolocationServer) GetLocationData(context.Context, *LocationRequest) (*LocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationData not implemented")
}
func (UnimplementedGeolocationServer) mustEmbedUnimplementedGeolocationServer() {}

// UnsafeGeolocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeolocationServer will
// result in compilation errors.
type UnsafeGeolocationServer interface {
	mustEmbedUnimplementedGeolocationServer()
}

func RegisterGeolocationServer(s grpc.ServiceRegistrar, srv GeolocationServer) {
	s.RegisterService(&Geolocation_ServiceDesc, srv)
}

func _Geolocation_GetLocationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServer).GetLocationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Geolocation/GetLocationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServer).GetLocationData(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Geolocation_ServiceDesc is the grpc.ServiceDesc for Geolocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Geolocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_server.Geolocation",
	HandlerType: (*GeolocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocationData",
			Handler:    _Geolocation_GetLocationData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler/grpc/schema/schema.proto",
}
